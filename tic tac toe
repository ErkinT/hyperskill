package tictactoe

fun String.isDigitsOnly() = all(Char::isDigit) && isNotEmpty()
fun main() {
    val list = mutableListOf(
        mutableListOf(" "," "," "),
        mutableListOf(" "," "," "),
        mutableListOf(" "," "," ")
    )
    println("-".repeat(9))
    println("| ${list[0][0]} ${list[0][1]} ${list[0][2]} |")
    println("| ${list[1][0]} ${list[1][1]} ${list[1][2]} |")
    println("| ${list[2][0]} ${list[2][1]} ${list[2][2]} |")
    println("-".repeat(9))
  loop@  do {
        var n = 0
        var m = 0

      while (n != 1) {

            val cor = readln().split(" ")
            if (cor[0].isDigitsOnly() && cor[1].isDigitsOnly()) {
                if (cor[0] >= "1" && cor[0] <= "3" && cor[1] >= "1" && cor[1] <= "3") {
                    if (list[cor[0].toInt() - 1][cor[1].toInt() - 1] == " ") {
                        list[cor[0].toInt() - 1][cor[1].toInt() - 1] = "X"
                        println("-".repeat(9))
                        println("| ${list[0][0]} ${list[0][1]} ${list[0][2]} |")
                        println("| ${list[1][0]} ${list[1][1]} ${list[1][2]} |")
                        println("| ${list[2][0]} ${list[2][1]} ${list[2][2]} |")
                        println("-".repeat(9))
                        n++
                    }
                } else println("Coordinates should be from 1 to 3!")
            } else println("You should enter numbers!")
        }
      var x = 'X'
      if (list[0][0] == "X" && list[0][1] == "X" && list[0][2] == "X" || // rows
          list[1][0] == "X" && list[1][1] == "X" && list[1][2] == "X" ||
          list[2][0] == "X" && list[2][1] == "X" && list[2][2] == "X" ||
          list[0][2] == "X" && list[1][1] == "X" && list[2][0] == "X" || // diagonals
          list[0][0] == "X" && list[1][1] == "X" && list[2][2] == "X" ||
          list[0][0] == "X" && list[1][0] == "X" && list[2][0] == "X" || // columns
          list[0][1] == "X" && list[1][1] == "X" && list[2][1] == "X" ||
          list[0][2] == "X" && list[1][2] == "X" && list[2][2] == "X"
      ) x = 't'

      if (x == 't') {
          println("X wins")
          break@loop
      }
    if (list[0][0] != " " && list[0][1] != " " && list[0][2] != " " && // rows
        list[1][0] != " " && list[1][1] != " " && list[1][2] != " " &&
        list[2][0] != " " && list[2][1] != " " && list[2][2] != " "
        ) {
        println("Draw")
        break@loop
    }
        while (m != 1) {

            val corO = readln().split(" ")
            if (corO[0].isDigitsOnly() && corO[1].isDigitsOnly()) {
                if (corO[0] >= "1" && corO[0] <= "3" && corO[1] >= "1" && corO[1] <= "3") {
                    if (list[corO[0].toInt() - 1][corO[1].toInt() - 1] == " ") {
                        list[corO[0].toInt() - 1][corO[1].toInt() - 1] = "O"
                        println("-".repeat(9))
                        println("| ${list[0][0]} ${list[0][1]} ${list[0][2]} |")
                        println("| ${list[1][0]} ${list[1][1]} ${list[1][2]} |")
                        println("| ${list[2][0]} ${list[2][1]} ${list[2][2]} |")
                        println("-".repeat(9))
                        m++
                    }
                } else println("Coordinates should be from 1 to 3!")
            } else println("You should enter numbers!")
        }


        var o = 'O'


        if (list[0][0] == "O" && list[0][1] == "O" && list[0][2] == "O" || // rows
            list[1][0] == "O" && list[1][1] == "O" && list[1][2] == "O" ||
            list[2][0] == "O" && list[2][1] == "O" && list[2][2] == "O" ||
            list[0][2] == "O" && list[1][1] == "O" && list[2][0] == "O" || // diagonals
            list[0][0] == "O" && list[1][1] == "O" && list[2][2] == "O" ||
            list[0][0] == "O" && list[1][0] == "O" && list[2][0] == "O" || // columns
            list[0][1] == "O" && list[1][1] == "O" && list[2][1] == "O" ||
            list[0][2] == "O" && list[1][2] == "O" && list[2][2] == "O"
        ) o = 't'


          if (o == 't') {
            println("O wins")
            break@loop
        }
      val a = 0
    } while (a == 0)
}
